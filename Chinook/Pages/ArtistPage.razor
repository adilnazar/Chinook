@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.ClientServices
@using Chinook.ClientServices.Interfaces
@using Chinook.Infrastructure.Contracts.Services;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="SelectedExistingPlaylist">
                @if (ExistingUserPlaylists != null && ExistingUserPlaylists.Count() > 0)
                {
                    <option value="">Select a playlist</option>
                    @foreach (var playlist in ExistingUserPlaylists)
                    {
                        <option value="@playlist.PlaylistId">@playlist.Name</option>
                    }
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" @bind="NewPlaylistName" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }

    [Inject] IClientTrackService TrackService { get; set; }
    [Inject] IClientPlaylistService PlaylistService { get; set; }
    [Inject] IClientArtistService ArtistService { get; set; }
    [Inject] IAppState AppState { get; set; }
   
    private Modal PlaylistDialog { get; set; }

    private ArtistModel Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private List<Chinook.ClientModels.Playlist> ExistingUserPlaylists;
    private long? SelectedExistingPlaylist { get; set; }
    private string NewPlaylistName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artist = await ArtistService.GetArtistByIdAsync(ArtistId);
        Tracks = await TrackService.GetTracksByArtist(ArtistId);
    }

    private async Task FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var result = await TrackService.FavoriteTrack(trackId);

        if (result)
        {
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist My favorite tracks.";
            Tracks = await TrackService.GetTracksByArtist(ArtistId);
            StateHasChanged();
            AppState.NotifyStateChanged();
        }
        else
        {
            InfoMessage = $"Failed to add to playlist My favorite tracks.";
        }
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var result = await TrackService.UnFavoriteTrack(trackId);

        if (result)
        {
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist My favorite tracks.";
            Tracks = await TrackService.GetTracksByArtist(ArtistId);
            StateHasChanged();
        }
        else
        {
            InfoMessage = $"Failed to remove from playlist My favorite tracks.";
        }


    }

    private async Task OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        ExistingUserPlaylists = await PlaylistService.GetPlaylistsAsync();
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();
        var message = "";
        if (!string.IsNullOrEmpty(NewPlaylistName))
        {
            var result = await TrackService.AddTrackToPlaylist(SelectedTrack.TrackId, null, NewPlaylistName);
            if (!string.IsNullOrEmpty(result))
            {
                message = result;
            }
            else
            {
                message = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to new playlist {NewPlaylistName}.";
                AppState.NotifyStateChanged();
            }

        }
        else if (SelectedExistingPlaylist != null)
        {
            var result = await TrackService.AddTrackToPlaylist(SelectedTrack.TrackId, SelectedExistingPlaylist, null);
            if (result != "")
            {
                message = result;
            }
            else
            {
                message = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {ExistingUserPlaylists.First(p => p.PlaylistId == SelectedExistingPlaylist).Name}.";
            }
        }
        else
        {
            message = "Please select an existing playlist or create a new one.";
        }

        InfoMessage = message;
        NewPlaylistName = "";
        SelectedExistingPlaylist = null;
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
